#include <cstdlib>
#include <cstdio>
#include <bits/stdc++.h>
#include <algorithm>
#include <time.h>
#include <vector>
#include <map>
#include <assert.h>
using namespace std;
#define u128 __int128
#define MOD 1000000007
int T;
long long n, m, k;
const int MaxN = 1000005;

bool mark[MaxN];
unsigned fibk[]={3,8,6,20,24,16,12,24,60,10,24,28,48,40,24,36,24 ,18 ,60 ,16 ,30 ,48 ,24 ,100 ,84 ,72 ,48 ,14 ,120 ,30 ,48 ,40 ,36 ,80 ,24 ,76,18 ,56 ,60 ,40 ,48 ,88 ,30 ,120 ,48 ,32 ,24 ,112 ,300 ,72 ,84 ,108,72,20 ,48 ,72 ,42 ,58 ,120 ,60, 30 ,48 ,96, 140 ,120, 136, 36, 48 ,240 ,70 ,24 ,148 ,228, 200 ,18, 80, 168, 78 ,120,216,120,168,48,180,264,56,60,44,120,112,48,120,96,180,48,196,336,120,300,50,72,208,84,80,108,72,72,108,60,152,48,76,72,240,42,168,174,144,120,110,60,40,30,500,48,256,192,88,420,130,120,144,408,360,36,276,48,46 ,240 ,32, 210 ,140 ,24, 140 ,444 ,112 ,228,148,600,50,36,72,240 ,60,168,316,78,216,240,48,216,328,120,40,168,336,48,364,180,72,264,348,168,400,120,232,132,178,120,90,336,120,48,380, 20,180,96,144,180,190,96,388 ,588, 280 ,336 ,396 ,120 ,22 ,300 ,136 ,150 ,112 ,72 ,40, 624 ,48 ,168 ,90, 240 ,42,108,280,72,440,72,240,108,296,60,252,456,448,48,600,228,456,72,114,240,80,84,52,168,160,174,312,144,238,120,240 ,330,648, 60,560 ,120 ,252 ,60 ,168 ,1500 ,250 ,48 ,240, 768 ,360 ,384 ,516, 264 ,304 ,420 ,168 ,390 ,176, 120, 540 ,144 ,88, 408, 268 ,360 ,270 ,72 ,112 ,276 ,100 ,48 ,556, 138 ,120 ,240 ,56, 96 ,568, 210 ,360 ,420, 80, 48 ,612 ,420, 392 ,444 ,588, 336, 580 ,228,360,444,336,600,176,150,200,72,60,72,88,240,208,60,310,168,628,948,240, 8,636,216,70,480,72,48,36,216,700,984,216,120,32 ,120,110,168,456 ,336 ,680 ,48 ,676,1092 ,152,180 ,30 ,72 ,784 ,264 ,240 ,348 ,232 ,168 ,174, 1200 ,504 ,240 ,236, 696 ,140 ,132 ,144, 534 ,358, 120, 342 ,90 ,440 ,336 ,740, 120 ,736 ,48, 120,1140,432,120,748,180,1000,96,28,144,378,180,256,570,768,192,80,1164,264,588,388,840, 144,336,520,396,780,120,796,66,144,600,200,408,420,150,1080 ,336 ,380, 72,408 ,120,552 ,624 ,464,48, 840 ,336 ,184, 90 ,418 ,240 ,84 ,42, 96 ,108 ,900 ,840, 240 ,72 ,280 ,1320 ,430 ,72 ,868 ,240, 280 ,108 ,144 ,888 ,438 ,60, 336 ,252 ,888 ,456 ,220 ,1344 ,296, 96, 448, 600 ,40 ,228,200,456,560,72,916,114,72,240,46 ,240,928,168,120,156,936,168,272,480,632,348,440,312,900,144,216,714,478,240,532,240,48,330,980 ,648,976 ,60 ,328 ,1680 ,490 ,120,252, 252, 120 ,120 ,560 ,168 ,498, 1500, 336,750,1008,48,100,240,728,768,254,360,592,768,72,516,1040,264,160,912,696,420,26 ,168 ,1048,390 ,400,528 ,180 ,120 ,1104,540 ,696, 144, 280,264 ,360 ,408,712 ,804, 560,360, 90 ,270, 360 ,144 ,540 ,336, 1096 ,276 ,120 ,300 ,126 ,48 ,624 ,1668 ,760 ,138,124,120,616,240,360,168,376,96,380,1704,432,420,568,360,570,420,760,240,1200,96, 1156,612,776,420,336,1176,540,444,840,588, 1176,336 ,90,1740,792, 456,1188,360,720, 444 ,88, 336, 598 ,600, 600 ,528 ,408 ,150 ,220 ,600 ,1216, 144 ,112, 60 ,224 ,72, 1228 ,264 ,40, 240, 1236 ,624, 206 ,60 ,144 ,930, 176 ,168 ,2500, 1884 ,360 ,948 ,684, 240, 630, 156, 168, 636, 1280, 216, 112 ,210, 840, 960, 640, 72, 1288, 48 ,440, 36, 1296, 216, 290, 2100, 240, 984 ,1308, 216 ,260,120,888,96,658,120,220,330,504, 168,720,456,336,336,448,2040 ,60,48,1348,2028,1800,1092,452,456,784,180,456,30,1368,72 ,1380 ,2352,456, 264 ,756,240,138,348,240,696 ,460, 168, 360 ,174 ,104 ,1200 ,700 ,504 ,684 ,480, 160, 708, 400 ,696, 118 ,420 ,312, 132, 240 ,144, 140 ,534, 952, 1074 ,718, 120, 208 ,342 ,240 ,90 ,700, 1320, 1456, 336, 1944 ,2220 ,792, 120 ,1468 ,2208, 560, 48 ,680 ,120, 738,1140,504, 432,496,120,740,2244,168,180,144,3000,750,96,1000,84,100 ,144,1516,378,240,180,380,768,432,570,360,768,812,384 ,192 ,240 ,1032, 1164,1548,264,300,588,304, 1164 ,360 ,840 ,70 ,144 ,504 ,336 ,1580 ,1560 ,1576 ,396 ,176 ,780,304,120,420,2388,1080,66,228, 144 ,288 ,1200,264 ,600,740 ,408,240, 420,536 ,300,202, 1080 ,270,336,1080,1140, 1640,72,792,408,336, 120 ,820, 552, 1648 ,624 ,200, 1392,1656, 48, 276 ,840, 1112 ,672 ,1008, 552 ,1680,90 ,360 ,1254 ,838, 240 ,406, 84 ,56 ,42 ,1820 ,96 ,880 ,216 ,568, 900 ,912, 840 ,1708 ,240 ,360 ,72 ,1716, 840 ,78 ,1320 ,80, 1290 ,1728 ,144 ,1740, 2604 ,1224 ,240 ,390 ,840, 952 ,108, 1176 ,144 ,2000, 888, 1756, 438 ,1176, 120 ,176, 336, 1768, 252 ,1160, 888 ,1776, 456 ,256 ,660,1080,1344,288,888,1780,192,336,1344,210,600,108,120,176,228,180,600,1816,456,600,1680,70,72,840 ,2748,120,114,1040,72,102,240,88,138,140,240,1900,2784,624,336,928,120,1008,156,1240,936,180,168, 1876, 816 ,1256, 480, 470 ,1896 ,240, 696 ,720 ,1320 ,1896 ,312, 1036, 900 ,1272 ,144 ,212 ,216 ,380 ,714 ,280 ,1434 ,1104 ,480, 930 ,1596 ,72 ,240 ,1940 ,48, 176, 660, 72 ,2940, 970 ,648 ,368 ,2928 ,1400, 120, 652, 984 ,220, 1680 ,216 ,1470 ,1968 ,120 ,1980 ,252 ,32 ,252, 528,120 ,198 ,240 ,440 ,1680 ,220 ,168, 1996 ,498, 1368 ,1500,560,336,1044,750,680,1008,108,48,126,300,1352,240,2028,2184,560,768,456,762,1018,360,510,1776,120,1536,200,72,1092,516,784,3120,206,264,2068,480,240,912,180,696,1038,840,232,78,592,168,180,3144,696,780,262,1200,1050,528,1512,180,420,240,400,1104,472,540,530,696,2128,144,280,840,980,264,356,360,144,408,532,2136,2200,804,1432,1680,168,360,96,90,1368,270,240,360,128,288,1320,540,1090,336,2188,3288,1480,276,732,120,1264,300,736,126,96,48,1260,624,360,1668,554,2280,50,276,432,372,2240,120,2236,1848,1496,240,522,360,2248,168,3000,1128,336,96,1128,1140,56,1704,1040,432,2280,840,1512,1704,1224,360,656,570,768,420,1140,2280,1140,240,768,1200,230,192,2308,3468,80,612,308,2328,180,420,792,336,2328,1176,260,540,776,888,336,840,1170,588,144,1176,800,336,360,90,1560,1740,1180,792,1456,912,1560,1188,2376,360,280,720,1592,444,2388,264,2380,336,144,1794,540,600,1200,600,200,528,240,408,1260,300,840,660,1392,600,2428,3648,3240,288,812,336,432,60,760,672,816,72,2800,3684,408,264,614,120,410,240,552,1236,1260,624,2476,618,464,60,1332,144,380,930,840,528,616,336,624,7500,552,1884,1424,360,500,948,1672,684,1258,240,196,630,168,312,240,168,720,636,288,3840,120,216,1224,336,1800,210,852,840,426,1920,240,1920,2568,72,2580,3864,840,48,322,1320,430,36,1720,1296,1520,216,2596,870,1736,2100,1300,240,2608,984,840,1308,872,216,720,780,144,240,700,888,880,96,1752,1974,1318,120,1320,660,1008,330,2700,504,2656,168,888,720,1210,456,1320,336,440,336,1520,1344,1456,2040,888,60,468,96,1340,4044,448,2028,630,1800,1552,1092,40,1356,540,456,1392,2352,600,360,680,456,224,30,560,1368,2736,72,2812,1380,1832,2352,2748,456,500,528,216,756,1584,240,460,138,184,348,2780,240,1332,696,928,1380,504,168,176,360,120,174,1280,312,1398,1200,936,2100,240,504,280,684,272,960,704,480,504,708,1896,1200,2840,696,756,354,440,420,112,312,2848,264,1800,240,168,144,1428,420,216,1068,2868,2856,80,1074,1912,2154,1438,240,130,624,1064,342,3060,240,2896,180,48,2100,1450,1320,2908,4368,1960,336,480,1944,1458,2220,976,792,720,120,2940,4404,984,2208,532,1680,490,96,1960,2040,2900,120,336,738,504,1140,1480,504,424,432,360,1488,2976,120,1488,2220,560,2244,2988,168,1680,180,1992,144,1498,3000,234,750,336,96,880,3000,1380,84,1008,300,302,144,396,4548,200,378,760,240,1680,360,2184,1140,1016,768,300,432,1016,1140,230,360,1530,768,592,2436,440,768,756,192,216,240,816,1032,3088,1164,1040,1548,1008,264,774,300,160,1176,1036,912,620,1164,696,360,1558,840,448,210,104,144,3140,504,3136,336,1048,4740,1570,1560,1540,4728,1200,396,504,528,526,780,360,912,3168,120,3180,420,1104,2388,912,1080,1672,132,2088,228,140,144,68,288,280,2400,160,264,912,600,360,2220,3216,408,1608,240,2136,420,3228,1608,180,600,560,606,1618,1080,810,270,360,336,3500,1080,3256,1140,360,4920,208,144,1680,792,1080,408,3276,336,740,120,1096,2460,540,552,160,4944,360,624,1764,600,1792,1392,504,1656,220,48,3316,276,624,840,50,3336,3328,1344,2280,1008,3336,552,834,1680,248,180,1904,360,3400,1254,616,2514,1776,240,1640,1218,360,84,3380,168,240,84,376,5460,396,96,3388,2640,760,432,3396,1704,566,900,1296,912,1820,840,60,5124,568,240,854,360,406,72,2280,1716,3920,840,900,78,2280,1320,430,240,3448,1290,1200,1728,1580,288,1008,1740,2312,2604,1156,1224,1160,240,2328,390,608,840,870,2856,336,216,1740,1176,3496,144,1080,6000,1872,888,3508,5268,2520,438,2000,1176,1758,240,1176,528,440,336,1180,5304,360,252,420,3480,240,888,792,1776,700,456,3556,768,2376,660,1932,1080,3568,1344,720,288,3576,888,894,5340,264,384,1640,336,3580,1344,2392,210,2064,600,1800,108,600,120,3420,528,644,456,1224,180,1810,600,2128,5448,440,456,624,600,72,1680,1216,210,1216,144,3700,840,336,2748,870,120,1830,228,224,3120,3680,72,1680,102,2456,240,176,264,1764,138,120,420,3696,240,3784,5700,2472,2784,108,624,2160,672,824,2784,1820,120,930,1008,432,156,3740,3720,3736,936,176,180,374,168,3748,5628,5000,816,1252,3768,1878,480,360,1410,1072,1896,140,240,1368,1392,1888,720,60,1320,2520,1896,3780,312,2160,3108,168,900,1900,1272,1740,144,1280,636,3816,216,336,1140,112,1428,1276,840,3840,1434,2520,1104,450,960,684,930,640,1596,400,72,160,240,1288,5820,1930,48,3868,528,1320,1320,1036,72,2224,2940,1296,2910,952,648,1940,1104,1160,2928,1948,4200,390,240,240,1956,720,984,1872,660,2616,1680,2052,216,700,1470,520,1968,112,120,890,1980,2664,252,1316,96,3900,252,2632,528,1978,120,1136,198,440,480,3980,1320,3976,1680,504,660,90,168,3988,5988,720,498,3996,1368,666,3000};

map<long long, long long> pisanoMap,divisor;
typedef long long int64;
typedef unsigned long long uint64;
typedef long long LL;
typedef long double LD;
#define max_uint64 9223372036854775807ULL

struct fb {
	int r;
	LL p;
};



inline int64 mulmod(int64 a, int64 b, int64 mod) {
    int64 res = (a * ((long double) b / (long double) mod));
    res = a * b - res * mod;
    if (res >= mod) res -= mod;
    if (res < 0) res += mod;
    return res;
}
inline int64 power(int64 a, int64 n,int64 mod)
{
    int64 power = a;
    int64 result = 1;
 
    while (n)
    {
        if (n & 1)
            result = mulmod(result , power ,mod);
        power = mulmod(power , power, mod);
        n >>= 1;
    }
    return result;
}
 
bool witness(int64 n, int64 s, int64 d, int64 a)
{
    int64 x = power(a, d, n);
    int64 y;
 
    while (s) {
        y = mulmod(x , x, n);
        if (y == 1 && x != 1 && x != n-1)
            return false;
        x = y;
        --s;
    }
    if (y != 1)
        return false;
    return true;
}
inline bool is_prime_mr(int64 n)
{
    if (((!(n & 1)) && n != 2 ) || (n < 2) || (n % 3 == 0 && n != 3))
        return false;
    if (n <= 3)
        return true;
    if(n < MaxN) return mark[n];
    int64 d = n>>1;
    int64 s = 1;
    while (!(d & 1)) {
        d>>=1;
        ++s;
    }
 
    if (n < 1373653)
        return witness(n, s, d, 2) && witness(n, s, d, 3);
    if (n < 9080191)
        return witness(n, s, d, 31) && witness(n, s, d, 73);
    if (n < 4759123141LL)
        return witness(n, s, d, 2) && witness(n, s, d, 7) && witness(n, s, d, 61);
    if (n < 1122004669633LL)
        return witness(n, s, d, 2) && witness(n, s, d, 13) && witness(n, s, d, 23) && witness(n, s, d, 1662803);
    if (n < 2152302898747LL)
        return witness(n, s, d, 2) && witness(n, s, d, 3) && witness(n, s, d, 5) && witness(n, s, d, 7) && witness(n, s, d, 11);
    if (n < 3474749660383LL)
        return witness(n, s, d, 2) && witness(n, s, d, 3) && witness(n, s, d, 5) && witness(n, s, d, 7) && witness(n, s, d, 11) && witness(n, s, d, 13);
    return witness(n, s, d, 2) && witness(n, s, d, 3) && witness(n, s, d, 5) && witness(n, s, d, 7) && witness(n, s, d, 11) && witness(n, s, d, 13) && witness(n, s, d, 17);
}


inline int64 gcd(int64 u,int64 v)
{
    int64 shift, diff;
    
    if (u == 0 || v == 0)
        return u | v;

    for (shift = 0; ((u | v) & 1) == 0; ++shift)
    {
        u >>= 1;
        v >>= 1;
    }
    
    while ((u & 1) == 0)
        u >>= 1;
       

    do {
        while ((v & 1) == 0)
            v >>= 1;
            


        if (u < v)
            v -= u;
        else
        {
            diff = u - v;
            u = v;
            v = diff;
        }
        v >>= 1;
    
    } while (v != 0);
    
    return u << shift;
}
inline int64 scan()
    {
        int64 z=0;
        char c;
        do{ c=getchar_unlocked(); } while(c<'0');
        for(;c>='0';c=getchar_unlocked()) z = (z<<3) + (z<<1) + (c&15);
        return z;
    }
inline void put_uint(int64 n) {
  char stack[22];
  int top = 0;
  if(n == 0) {
    putchar_unlocked('0');
  } else {
    while(n > 0) {
      stack[top++] = n % 10 + '0';
      n /= 10;
    }
    while(top > 0) {
      putchar_unlocked(stack[--top]);
    }
  }
  putchar_unlocked('\n');
}
uint64 brent_pollard_factor(uint64 n)
{
   const int m = 50;
   uint64 a, x, y, ys, r, q, g;
   do
      a = random() % n;
   while(a==0||a==n-2);
   y = random() % n;
   r = 1;
   q = 1;
 
   do {
      x = y;
      for(int i=0; i < r; i++) {
         y = mulmod(y, y, n);
         y += a;
         if(y < a)
            y += (max_uint64 - n) + 1;
         y %= n;
      }
 
      uint64 k =0;
      do {
         for(int i=0; i < m && i < r-k; i++) {
            ys = y;
 
            y = mulmod(y, y, n);
            y += a;
            if(y < a)
               y += (max_uint64 - n) + 1;
            y %= n;
 
            q = mulmod(q, (x>y)?x-y:y-x, n);
         }
         g = gcd(q, n);
         k += m;
      } while(k < r && g == 1);
 
      r <<= 1;
   } while(g == 1);
 
   if(g == n) {
      do {
         ys = mulmod(ys, ys, n);
         ys += a;
         if(ys < a)
            ys += (max_uint64 - n) + 1;
         ys %= n;
 
         g = gcd((x>ys)?x-ys:ys-x, n);
      } while(g == 1);
   }
 
   return g;
}




inline void factor(int64 n, int64 ret[], int& size){
    if (n == 1) return;

    if (is_prime_mr(n)){
		ret[++size] = n;
		divisor[n]++;
        return;
    }

	int64 d = brent_pollard_factor(n);
    factor(d, ret, size);
    factor(n / d, ret, size);
}


int primes[MaxN], pCount = 0;

inline void factorPro(int64 n, int64 ret[], int &size){

    for (int i = 0; n > 1 &&  i < 200; i++) while (n % primes[i] == 0){
        n /= primes[i];
        ret[++size] = primes[i];
    }

    factor(n, ret, size);
}

inline void largefactor(int64 n, int64 p[], int deg[], int& factorNum)
{
	int size = 0;
	p[0] = 0;
	factorPro(n, p, size);
	sort(p + 1, p + size + 1);
	for (int i = 1; i <= size; i++)
	{
		if (p[i] == p[i - 1])
			deg[factorNum]++;
		else
		{
			factorNum++;
			p[factorNum] = p[i];
			deg[factorNum] = 1;
		}
	}
}


int64 up[200];
int64 F[200][5];
int S;

int factorNum1;
int64 p1[100];
int deg1[100];

int64 a,b;
int64 fibb(int64 n, int64 MM)
{
	if(n==0)
	{
		a=0;b=1;
		return a;
	}
	else
	{
		a=fibb(n>>1,MM);
		int64 c = mulmod(a , (b+b - a+MM) , MM);
		int64 d = mulmod(b,b,MM) + mulmod(a,a,MM);
		if(d>=MM)d-=MM;
		if(n&1){
			a=d;
			b=c+d;
			return a;
		}
		else{
			a=c;
			b=d;
			return a;
		}
	}
}
inline long long PisanoPeriodPrime(long long p)
{
	if (p <= 2000) return pisanoMap[p]=fibk[p-2];

	if (pisanoMap.find(p) != pisanoMap.end())
		return pisanoMap[p];

	long long n;
	if (p % 5 == 1 || p % 5 == 4)
		n = p - 1;
	else
		n = (p + 1) * 2;

	factorNum1 = 0;
	largefactor(n, p1, deg1, factorNum1);

	long long fn, fn1;
	for (int i = 1; i <= factorNum1; i++)
	{
		for (int j = 1; j <= deg1[i]; j++)
		{	
			fibb(n / p1[i], p); fn=a, fn1=b;;
			if (fn != 0LL || fn1 != 1LL)
				break;
			else
				n = n / p1[i];
		}
	}

	pisanoMap[p] = n;
	return n;
}

long long tmp[100];
inline long long PisanoPeriod(long long p[], int deg[], int factorNum)
{
	if (factorNum == 0)
		return 1LL;

	for (int i = 1; i <= factorNum; i++)
	{
		tmp[i] = 1LL;
		for (int j = 1; j < deg[i]; j++)
			tmp[i] = tmp[i] * p[i];
		tmp[i] = tmp[i] * PisanoPeriodPrime(p[i]);
	}

	long long ret = tmp[1];
	for (int i = 2; i <= factorNum; i++)
		ret = (ret / gcd(ret, tmp[i])) * tmp[i];

	return ret;
}

map<long long, int> periodMap;
long long p[1000];
int deg[1000];


long long pisanoPeriods[1000000];
long long solve(int64 m,int k)
{
		if (k > 1)
		{
			pisanoPeriods[0] = m;
			int periodNum = 0;
			for (int i = 1; i < k; i++)
			{
				if (pisanoMap.find(pisanoPeriods[i - 1]) != pisanoMap.end())
					pisanoPeriods[i] = pisanoMap[ pisanoPeriods[i - 1] ];
				else
				{
					int factorNum = 0;
					largefactor(pisanoPeriods[i - 1], p, deg, factorNum);
					pisanoPeriods[i] = PisanoPeriod(p, deg, factorNum);
					pisanoMap[ pisanoPeriods[i - 1] ] = pisanoPeriods[i];
				}
				return (pisanoPeriods[i]);
			}
		}
}



fb twick(LL p){
	LL rem = p%20;
	fb fbi;
	int rank = 1;
	LL k=2;
	if(p==2){
		fbi.r = 1;
		fbi.p = 3;
		return fbi;
	}
	long long prod = solve(p,k);
	LL num[] ={4,2};
	for(int i=0;i<2;i++){
		long long aux = fibb(prod/num[i],p);
		if(aux == 0){
			rank = max(num[i],rank*1LL);
			break;
		}
	}
	fbi.r = rank;
	fbi.p = prod;
	return fbi;
}
inline u128 mul2(u128 a, u128 b,u128 mod){
	if (a >= mod) a %= mod;
	if (b >= mod) b %= mod;
	long double x = a;
	u128 c = x * b / mod;
	u128 r = (u128)(a * b - c * mod) % (u128)mod;
	return r < 0 ? r + mod : r;
}

u128 powerL(u128 a, u128 n,u128 mod)
{
    u128 power = a;
    u128 result = 1;
 
    while (n)
    {
        if (n & 1)
            result = mul2(result , power , mod);
            power  = mul2(power  , power , mod);
        n >>= 1;
    }
    return result;
}


int main()
{
    for (int i = 2; i < MaxN; i++) mark[i] = true;
    for (int i = 2; i * i < MaxN; i++) if (mark[i])
        for (int j = i * i; j < MaxN; j += i){
            mark[j] = false;
        }

    for (int i = 2; i < MaxN; i++) if (mark[i])
        primes[pCount++] = i;

	LL aA,bB;

	scanf("%d", &T);
	

	for (int t = 0; t < T; t++)
	{
		k=2;
		aA=scan();
		bB=scan();
		m=scan();
		fb fbi = twick(m);
		LL entr = fbi.p/fbi.r;
		u128 Mod = 1;
		Mod = Mod * MOD*fbi.p;
		u128 res = mul2(powerL(aA,bB,Mod) , fbi.r, Mod);
		put_uint((res)/fbi.p + 1);
	}
	return 0;
}